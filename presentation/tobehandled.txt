= WDM

== Assignment 1 (Chapter 5)

=== Minimal Web application

...
 
==== Mimic real life by  assuming the database was 3rd 

.Propose jquery icw xquery
.Problems: same origin policy
.Solution: proxy script 

Of course we were not the only ones with this problem, there are proxy
scripts which handle this, they generally work by being called by the
frontend and proxy the request to the 3rd party -- in this case the Exist-DB

==== Pretty dull, bootstrap to the rescue.

=== Shakespeare Opera Omnia
==== Re-use of provided material
==== XSL reuse.
==== Use the Exist framework 

Normally the framework exists out of the following components:
* templating
* .. 

We have added an extra step by using XSL, instead of doing this ``by
hand'' in xquery. 

===  MusicXML on line

* Web app forwards the query to the eXist db
* XML file with search results is returned and displayed on the site
* Upon clicking a result, the MusicXML file is downloaded and converted to PDF and MIDI using Lilypond
* Issue: MusicXML files not consistent

== Assignment 2 (Chapter 19)

...

=== Setup

* Hadoop
* Pig
* Resources
* Code

==== Maven to the rescue.

* mvn package
* mvn exec:java -Dexec.mainClass="Class" -Dexec.args="input output"

==== For more elaborate setups, use vagrant and Puppet.

...

=== Exercise 1

...

=== Exercise 2
...

=== Exercise 3

* Pig queries (niet zoveel over te zeggen?)

=== Exercise 4

* <K,V> in mapper is <file,content>
* Words are put to lowercase and stripped of punctuation, stopwords are not considered
* Output of the form <word,filename:1> for each word
* Combiner adds up occurrences of words within the same file and returns them in the same format as mapper
* HashMap is used to track counts per document for a word
* Reducer extends combiner (parses the same way), but yields a different output format, including tf and idf
* Issue: total number of docs required for idf calculation - solved by storing number of documents in configuration at runtime