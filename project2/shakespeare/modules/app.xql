xquery version "3.0";

module namespace app="http://exist-db.org/apps/in4331-shakespeare/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/in4331-shakespeare/config" at "config.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with a class attribute: class="app:test". The function
 : has to take exactly 3 parameters.
 : 
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

(: 
 : Idea taken from the original shakespeare example, we need this so the page.html template uses the correct relative links for
 : Javascript and css e.g. 
 :)
declare function app:base($node as node(), $model as map(*)) {
    let $context := request:get-context-path()
    let $app-dir := substring-after($config:app-root, "/db/")
    return
        <base href="{$context}/{$app-dir}/"/>
};

declare function app:title($node as node(), $model as map(*), $id as xs:string?) {
    <p>{$id}</p>
};

declare function app:play($node as node(), $model as map(*), $id as xs:string?) {
    transform:transform(collection(concat($config:app-root,'/data'))//PLAY[PLAYSUBT = upper-case($id)], doc('../data/shakes.xsl'), ())
};

declare function app:summary($node as node(), $model as map(*), $id as xs:string?) {
    transform:transform(collection(concat($config:app-root,'/data'))//PLAY[PLAYSUBT = upper-case($id)], doc('../data/summary.xsl'), ())
};
declare function app:params($char as xs:string?, $act as xs:string?, $scene as xs:string?){
     <parameters>
        <param name="char" value="{$char}"/>
        <param name="act" value="{$act}"/>
        <param name="scene" value="{$scene}"/>
        </parameters>
};

declare function app:parts($node as node(), $model as map(*), $id as xs:string?, $char as xs:string?, $act as xs:integer?, $scene as xs:integer?) {
    let $params := app:params($char, $act,$scene)
    return transform:transform(collection(concat($config:app-root,'/data'))//PLAY[PLAYSUBT = upper-case($id)], doc('../data/parts.xsl'), $params)
};

declare function app:playList($node as node(), $model as map(*), $id as xs:string?, $char as xs:string?, $act as xs:integer?, $scene as xs:integer?){
    <ul>{
        for $p in collection(concat($config:app-root,'/data'))//PLAY/PLAYSUBT
        return <li><a href="plays/{$p/text()}">{$p/text()}</a></li>
    }</ul>
};